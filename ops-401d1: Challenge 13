#!/usr/bin/env python

#!/usr/bin/env python3
##  /\__/\
#  (=^ .^=)
#   (")(")__/  
##
# Script:                 Ops 401 13
# Author:                 Kimberly Dills
# Date of last revision:  10/21/2020
# Description of purpose: Network Security Tool with Scapy 3 of 3


#Import Library
import ipaddress
import sys
import socket
import random
from scapy.all import sr1,IP,ICMP,TCP,ARP,Ether,srp
#Declaration of variable
def interface():
    user_choice = input("""
    what do you want to perform?
    1. SecTool 1 (Ping scan for open or close)
    2. SecTool 2 
    3. SecTool 3
    4. Exit
    """)
    if(user_choice == "1"):
        401OpsChall11.py(input("Please enter your ip: "))
    elif(user_choice == "2"):
        401OpsChall12.py()
    elif(user_choice == "3"):
        401OpsChall13.py()
    else:
        print("Exiting....")
        exit()
def monday_lab(host):
    if host == None:
        return
    host_count = 0
    port_range = [21, 22, 23]
    src_port = 22
    dst_port = 22
### (dst=host) which is
    response = sr1(IP(dst=host)/TCP(sport=src_port,dport=dst_port,flags="S"),timeout=1,verbose=0)
###Function###
    for dst_port in port_range:
        src_port = random.randint(1025,65534)
        if response is None:
            print("packet filtered")
        elif(response.haslayer(TCP)):
            if(response.getlayer(TCP).flags == 0x12): #port responding and open
                print("Port " + str(dst_port) + " is open")
            elif (response.getlayer(TCP).flags == 0x14):#port responding and closed
                print("Port " + str(dst_port) + " is closed")
            else:
                print("The port is filtered and dropped")#port is filtered and dropped silently
def 401OpsChall12():
    network = input("Enter your network address with the CIDR block code: ")
    addresses = ipaddress.IPv4Network(network)
    host_count = 0
    for host in addresses:
        if (host in (addresses.network_address, addresses.broadcast_address)):
            continue
        resp = sr1(
            IP(dst=str(host))/ICMP(),
            timeout=2,
            verbose=0,
        )
        if resp is None:
            print(f"{host} is down or not responding.")
        elif (
            int(resp.getlayer(ICMP).type)==3 and
            int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13]
        ):
            print(f"{host} is blocking ICMP.")
        else:
            print(f"{host} is responding.")
            host_count += 1
    print(f"{host_count}/{addresses.num_addresses} hosts are online.")
def 401OpsChall13():
    request = ARP()
    request.pdst = input("Enter your ip with the CIDR block: ")
    broadcast = Ether()
    broadcast.dst = 'ff:ff:ff:ff:ff:ff'
    request_broadcast = broadcast / request
    clients = srp(request_broadcast, timeout = 1)[0]
    for element in clients:
         401OpsChall11(element[1].psrc)
         print(element[1].psrc + "      " + element[1].hwsrc)
#Main
while True:
    interface()
#End
