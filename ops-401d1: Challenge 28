#!/usr/bin/env python3
##  /\__/\
#  (=^ .^=)
#   (")(")__/  
##
# Script Name: Ops Challenge 27
# Author:      Kimberly Dills
# Date of last revision: 11/10/2020
# Description of purpose: Running Linux terminal commands in Python
# Event Logging Tool Part 3 of 3 

import logging, time, os
from logging.handlers import RotatingFileHandler


def verification(user_input):
    isFile = os.path.isfile(user_input)
    if isFile is False:
        print("Directory not found.")
    
    else:
        file_crawler(user_input)

# Declaration of variables:

operwhoami= os.popen("whoami").read()
operipa= os.popen("ip a").read()
operlshw= os.popen("sudo lshw -short").read()

# Declaration of functions

# Main

print (operwhoami)
print (operipa)
print (operlshw)


#try:
#    verification()

#except Exception as msg:
#    print(msg)
#    logging.exception(msg)

print('Logging started')

logging.basicConfig(filename='/home/osboxes/test_log.txt', level=logging.ERROR,)
log_file= "test.log.txt"
time_log="timed_tet.log"
print('Logging completed')
logging.debug('Information to debug')
logging.info('All the information..')
logging.warning('Warning!')
logging.error('Error information')
logging.critical('Critical information')
print('Logging end')

# OpsChall27 Logging tool Part 2
# Add a log rotation feature based on size
#def create_rotating_log(user_input):
#    """
#    Creates a rotating log
#    """
logger = logging.getLogger('Rotating Log')
handler = RotatingFileHandler('my_log.log', maxBytes=50, backupCount=5) #set each Value
logger.addHandler(handler)

for i in range(10): #set each VALUE
    logmsg = "Hello world!"
    logmsg += str(i)
    logger.warning(logmsg)
    print ("Logging Hello world! number", i)
    os.system("ls -al")
    time.sleep(1.5)
    
# Chall28

logger = logging.getLogger(__name__)
'''
NOTE: Use __name__ to generically reference the name of the python file that called logging.getlogger. This way if you change the file name, you don't have to update this.

Create handlers.
'''
print("Creating handlers...")
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler('file.log') # This file will appear in the same directory as this script.
c_handler.setLevel(logging.WARNING)
f_handler.setLevel(logging.ERROR)
time.sleep(2)


# Add handlers to the logger
print("Adding user handlers to the logger...")
logger.addHandler(c_handler)
logger.addHandler(f_handler)
time.sleep(2)

# These should print to the screen. However, because errors are sent into the file handler, they'll also get appended into the log file.
print("Generating one warning log and one error log...")
logger.warning('This is a warning')
logger.error('This is an error')
time.sleep(2)

print("Program complete. View 'file.log' to see errors.")
os.system("ls -al")

# End 
