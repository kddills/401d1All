#!/usr/bin/env python3
##  /\__/\
#  (=^ .^=)
#   (")(")__/  
##
# Script:                 Ops 401 17
# Author:                 Kimberly Dills
# Date of last revision:  10/27/2020
# Description of purpose: Automated Brute Force Wordlist Attack Tool 2 of 3

# Import Libraries 
import os
import itertools
import time
from pexpect import pxssh
import getpass

def user_selection():
    user_choice=input("""
    select a mode:
    1. Mode 1
    2. Mode 2
    3. Mode 3
    4. Mode 4
    """)

    if(user_choice =="1"):
        mode1()
    elif(user_choice =="2"):
        mode2
    elif(user_choice =="3"):
        mode3    
    else: 
        print("Exit")
        exit()

# Mode 1 Offensive, Dictionary Iterator
def mode1():

# Accept a user input word list file path and iterates through the word list assinging the word being read to a variable
  word_list = input("Enter a Filename: ")
#textfile=os.path.abspath(word_list)
  filename=open(word_list, "r", encoding= "ISO-8859-1")
  filename=filename.readlines()

  for line in fileline:
    print(line)
# Adding a delay between words sleep for 2 seconds
    time.sleep(2)

# stop the run

# Mode 2 Defensive, Password Recognized
def mode2():

# Accepts a user input string
  user_string=input("Enter a String: ")
# Accepts a user input word list file path
  word_list = input("Enter a Filename: ")
  filename=open(word_list, "r", encoding= "ISO-8859-1")
  fileline=filename.read().splitlines()
# Search the word list for the user input string
  
  for line in fileline:
  
  if str(line) == user_string:
      print("There was a match")
  break
  else:  
      print("No match was found")
input()
     
# Mode 3 Authenticate to an SSH server by its IP address
# Assume the username and IP are known inputs and attempt each word on the provided word list until successful login takes place. 
def mode3():
    s = pxssh.pxssh()
    host = input("Input target IP address: ")
    username = input("Inupt username: ")
    pwd = input("Input user password: ")

    try:
        s.login(host, username, pwd)
        s.sendline('uptime')
        s.prompt()
        print(s.before)     # print everything before the prompt
        s.sendline('df')
        s.prompt()
        print(s.before)
        s.logout()

    except pxssh.ExceptionPxssh as e:
        print("pxssh failed on login.")
        print(e)

# Main 
interface()        
# End
